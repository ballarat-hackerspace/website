#!/usr/bin/perl
#
# Licensed to the Apache Software Foundation (ASF) under one or or more
# contributor license agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership. The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

use FindBin;
use lib "$FindBin::Bin/lib";

use Mojolicious::Lite;

use Mojo::MQTT::Message;
use Mojo::UserAgent;
use Mojo::Util 'dumper';
use Time::Piece;

use constant {
  CONFIG_PATH => $ENV{BHACKD_CONFIG} // '/etc/bhackd.conf'
};

plugin 'JSONConfig'      => {file => CONFIG_PATH};
plugin 'Plugins::Stream' => app->config->{meta}     // {};

my $ua  = Mojo::UserAgent->new;
my $mqtt_ws_url = 'ws://127.0.0.1:9001/mqtt';
my $mqtt_topic_prefix = 'streams/';

my $keepAlive;

$ua->inactivity_timeout(0);

$ua->websocket($mqtt_ws_url => ['mqttv3.1'] => sub {
  my ($ua, $tx) = @_;
  say 'WebSocket handshake failed!' and return unless $tx->is_websocket;

  $tx->on(finish => sub {
    my ($tx, $code, $reason) = @_;
    say "WebSocket closed with status $code.";
  });

  $tx->on(binary => sub {
    my ($tx, $bytes) = @_;

    my $message = Mojo::MQTT::Message->new_from_bytes($bytes);

    # CONNACK
    if ($message->{type} == 2) {
      say 'Subscribing ...';
      my $m = Mojo::MQTT::Message->new(subscribe => {topics => [$mqtt_topic_prefix . '#']});
      $tx->send({binary => $m->encode});
    }
    # PUBLISH
    elsif ($message->{type} == 3) {

      my $stream = $message->{topic};
      $stream =~ s/$mqtt_topic_prefix//;

      my $data = $message->{data};

      my $ret = app->stream->publish(
        stream   => $stream,
        origin   => 'mqtt',
        data     => $data,
      );

      say 'write ' . ($ret ? 'ok' : 'nok');
    }
    # SUBACK
    elsif ($message->{type} == 9) {
      say 'Subscription ack.';
    }
    # PINGACK
    elsif ($message->{type} == 13) {
      say 'Ping ack.';
    }
    else {
      warn 'Unhandled message.', dumper $message;
    }
  });

  # send connection request
  my $m = Mojo::MQTT::Message->new(connect => {client_id => 'streamsdb'});
  $tx->send({binary => $m->encode});

  $keepAlive = Mojo::IOLoop->recurring(60 => sub {
    my $m = Mojo::MQTT::Message->new(pingreq => {});
    $tx->send({binary => $m->encode});
  });
});

Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
