#!/usr/bin/perl
#
# Licensed to the Apache Software Foundation (ASF) under one or or more
# contributor license agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership. The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

use FindBin;
use lib "$FindBin::Bin/lib";

use Mojolicious::Lite;

use Mojo::MQTT::Message;
use Mojo::UserAgent;
use Mojo::Util 'dumper';
use Time::Piece;

use constant {
  CONFIG_PATH => $ENV{BHACKD_CONFIG} // '/etc/bhackd.conf'
};

app->log->info('Configuration: ' . CONFIG_PATH);

plugin 'JSONConfig'      => {file => CONFIG_PATH};
plugin 'Plugins::Stream' => app->config->{meta}     // {};

my $ua  = Mojo::UserAgent->new;
my $mqtt_ws_url = 'ws://127.0.0.1:9001/mqtt';
my $mqtt_topic_prefix = 'streams/';

my $keepAliveTimer;
my $reconnectTimer;
my $connected = 0;
my $subscribed = 0;

$ua->inactivity_timeout(0);

sub mqttConnect() {
  $ua->websocket($mqtt_ws_url => ['mqttv3.1'] => sub {
    my ($ua, $tx) = @_;

    app->log->info('MQTT: connecting ...');

    unless ($tx->is_websocket) {
      app->log->info('MQTT: handshake failed!');
      $connected = 0;
      $subscribed = 0;

      return;
    }

    $tx->on(finish => sub {
      my ($tx, $code) = @_;
      app->log->info("MQTT: closed ($code).");

      $connected = 0;
      $subscribed = 0;
      Mojo::IOLoop->remove($keepAliveTimer) and undef $keepAliveTimer if $keepAliveTimer;
    });

    $tx->on(binary => sub {
      my ($tx, $bytes) = @_;

      my $message = Mojo::MQTT::Message->new_from_bytes($bytes);

      # CONNACK
      if ($message->{type} == 2) {
        app->log->info('MQTT: subscribing ...');
        my $m = Mojo::MQTT::Message->new(subscribe => {topics => [$mqtt_topic_prefix . '#']});
        $tx->send({binary => $m->encode});
      }
      # PUBLISH
      elsif ($message->{type} == 3) {

        my $stream = $message->{topic};
        $stream =~ s/$mqtt_topic_prefix//;

        my $data = $message->{data};

        my $ret = app->stream->publish(
          stream   => $stream,
          origin   => 'mqtt',
          data     => $data,
        );

        app->log->debug('MQTT: write ' . ($ret ? 'ok' : 'nok') . '.');
      }
      # SUBACK
      elsif ($message->{type} == 9) {
        app->log->info('MQTT: subscribed.');
        $subscribed = 1;
      }
      # PINGACK
      elsif ($message->{type} == 13) {
        app->log->debug('MQTT: ping/pong.');
      }
      else {
        warn 'MQTT: unhandled message.', dumper $message;
      }
    });

    app->log->info('MQTT: connected.');
    $connected = 1;

    # send connection request
    my $m = Mojo::MQTT::Message->new(connect => {client_id => 'streamsdb'});
    $tx->send({binary => $m->encode});

    $keepAliveTimer = Mojo::IOLoop->recurring(60 => sub {
      my $m = Mojo::MQTT::Message->new(pingreq => {});
      $tx->send({binary => $m->encode});
    });
  });
}

Mojo::IOLoop->recurring(5 => sub {
  unless ($connected) {
    mqttConnect();
  }
});

mqttConnect();

Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
