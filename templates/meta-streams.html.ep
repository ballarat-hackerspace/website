% layout 'page', active_page => 'streams', page_title => 'Stream';

<section id="team" class="section">
  <div class="container">
    <h2 class="title text-center">Streams</h2>

    <div class="row">
      <div class="col-sm-12">
        <p>Want to make your project talk to the Internet? Connect your existing project to the Internet to log, stream, and interact with the data it produces? What about all this  <a href="http://en.wikipedia.org/wiki/Internet_of_Things">Internet of Things</a> (IoT) stuff?</p>
        <p><i>Streams</i> is a platform we're designing to display, respond, and interact with your project's data. <span class="hidden">We also keep your data private (data feeds are private by default) and secure (we will never sell or give this data away to another company) for you.</span></p>
        <p>We couldn't find a good way to interact with them over the Internet. There are certainly a lot of great services out there for datalogging, or communicating with your microcontroller over the web, but these services are either too complicated to get started, or they aren't particularly fun to use. So, we decided to experiment with our own system, and that's <i>Streams</i>.</p>

        <h4>Active Streams</h4>
% if (@{$streams->{items}}) {
        <table class="table table-hover">
          <thead>
            <tr>
              <th>Stream</th>
              <th>Origin</th>
              <th>Type</th>
              <th>Data</th>
              <th>Timestamp</th>
            </tr>
          </thead>
          <tbody>
% use Mojo::JSON 'to_json';
%   for my $d (@{$streams->{items}}) {
            <tr>
              <td><a href="<%= url_for('meta-stream', stream => $d->{stream} ? $d->{stream} : '-') %>"><%= $d->{stream} ? $d->{stream} : '-' %></a></td>
              <td><%= $d->{origin} ? $d->{origin} : '-' %></td>
              <td><%= $d->{type} ? $d->{type} : '-' %></td>
              <td><%= to_json $d->{data} %></td>
              <td><%= Time::Piece->strptime($d->{timestamp}, '%s')->strftime('%F %T %Z') %></td>
            </tr>
%   }
          </tbody>
        </table>
% } else {
        <div class="alert alert-info">No streams found.</div>
% }
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">
        <h4>API Overview</h4>
        <p>The API is simple, we have one end point for publishing and a two end points for interrogation and retrieval.</p>

        <div class="panel panel-api">
          <div class="panel-heading">
            <div class="panel-title"><span class="label label-api label-info">POST</span><code>/meta/streams</code> Add a new data point.
              <button class="btn btn-cta btn-cta-sm pull-right" type="button" data-toggle="collapse" data-target="#collapsePostStreams" aria-expanded="false" aria-controls="collapsePostStreams"><i class="fa fa-fw fa-info"></i></button>
            </div>
          </div>
          <div class="collapse" id="collapsePostStreams">
            <div class="panel-body">
              <h4>Overview</h4>
              <p>Adds data points to a stream.</p>
              <h4>Parameters</h4>
              <p>Adding data points consist of three main attributes, two optional and one mandatory.</p>
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Required</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>stream</td>
                    <td>N</td>
                    <td>Name of the stream. Max length of 32 characters from [0-9a-zA-Z]. Defaults to '-'.</td>
                  </tr>
                  <tr>
                    <td>origin</td>
                    <td>N</td>
                    <td>Name of the origin. Defaults to '-'.</td>
                  </tr>
                  <tr>
                    <td>type</td>
                    <td>N</td>
                    <td>The type of data point. For example 'temperature', 'humidity'. Defaults to '-'.</td>
                  </tr>
                  <tr>
                    <td>lifetime</td>
                    <td>N</td>
                    <td>Lifetime of the data point in seconds. Defaults to 2,678,400 seconds (31 days).</td>
                  </tr>
                  <tr>
                    <td>data</td>
                    <td>Y</td>
                    <td>JSON blob of data.</td>
                  </tr>
                </tbody>
              </table>
              <h4>Return</h4>
              <p>A successful return has a HTTP status code of 200 and a JSON body containing a message and a timestamp of the server UTC time.</p>
              <p>An unsuccessful return has a HTTP status code of 400 and a JSON body containing a message of the error and a timestamp of the server UTC time.</p>
              <h4>Examples</h4>
              <pre><code>$ curl -H "Content-Type: application/json" -d '{"data":{"foo":"bar"}}' https://ballarathackerspace.org.au/meta/streams
{"message":"congratulations!","ts":1534465584}</code></pre>
              <pre><code>$ curl -H "Content-Type: application/json" -d '{"stream":"@#$#", "data":{"foo":"bar"}}' https://ballarathackerspace.org.au/meta/streams
{"message":"Stream name is invalid.","ts":1534490021}</code></pre>
            </div>
          </div>
        </div>

        <div class="panel panel-api">
          <div class="panel-heading">
            <div class="panel-title"><span class="label label-api label-success">GET</span><code>/meta/streams.json</code> List available streams.
              <button class="btn btn-cta btn-cta-sm pull-right" type="button" data-toggle="collapse" data-target="#collapseGetStreams" aria-expanded="false" aria-controls="collapseGetStreams"><i class="fa fa-fw fa-info"></i></button>
            </div>
          </div>
          <div class="collapse" id="collapseGetStreams">
            <div class="panel-body">
              <h4>Overview</h4>
              <p>Retrieves a paginated list of all the available streams.</p>
              <h4>Parameters</h4>
              <p>There are no required attributes for listing data streams, and two optional ones for pagination.</p>
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Required</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>itemsPerPage</td>
                    <td>N</td>
                    <td>Number of items to return per page. Defaults to 1000.</td>
                  </tr>
                  <tr>
                    <td>page</td>
                    <td>N</td>
                    <td>The page to retrieve, starting at an index of 0. Defaults to 0.</td>
                  </tr>
                </tbody>
              </table>
              <h4>Return</h4>
              <p>A successful return has a HTTP status code of 200 and a JSON body containing an paginated object of the available stream names and a timestamp of the server UTC time.</p>
              <p>An unsuccessful return has a HTTP status code of 400 and a JSON body containing a message of the error and a timestamp of the server UTC time.</p>
              <h4>Examples</h4>
              <pre><code>curl -H "Content-Type: application/json" https://ballarathackerspace.org.au/meta/streams.json
{"streams":{"items":["","bar","foo"],"itemsPerPage":1000,"page":0,"totalItems":3},"ts":1534540051}</code></pre>
              <pre><code>$ curl -H "Content-Type: application/json" -d '{"stream":"@#$#", "data":{"foo":"bar"}}' https://ballarathackerspace.org.au/meta/streams.json
{"message":"Stream name is invalid.","ts":1534490021}</code></pre>
            </div>
          </div>
        </div>

        <div class="panel panel-api">
          <div class="panel-heading">
            <div class="panel-title"><span class="label label-api label-success">GET</span><code>/meta/streams/:stream.json</code> List data points from the specified <code>:stream</code>.
              <button class="btn btn-cta btn-cta-sm pull-right" type="button" data-toggle="collapse" data-target="#collapseGetStreamsStream" aria-expanded="false" aria-controls="collapseGetStreamsStream"><i class="fa fa-fw fa-info"></i></button>
            </div>
          </div>
          <div class="collapse" id="collapseGetStreamsStream">
            <div class="panel-body">
              <h4>Overview</h4>
              <p>Retreives a paginated list of a stream's available data points.</p>
              <h4>Parameters</h4>
              <p>There are no required attributes for listing data streams, and two optional ones for pagination.</p>
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Required</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>itemsPerPage</td>
                    <td>N</td>
                    <td>Number of items to return per page. Defaults to 1000.</td>
                  </tr>
                  <tr>
                    <td>page</td>
                    <td>N</td>
                    <td>The page to retrieve, starting at an index of 0. Defaults to 0.</td>
                  </tr>
                </tbody>
              </table>
              <h4>Return</h4>
              <p>A successful return has a HTTP status code of 200 and a JSON body containing a paginated object of the available data points message and a timestamp of the server UTC time.</p>
              <p>An unsuccessful return has a HTTP status code of 400 and a JSON body containing a message of the error and a timestamp of the server UTC time.</p>
              <h4>Examples</h4>
              <pre><code>$ curl -H "Content-Type: application/json" https://ballarathackerspace.org.au/meta/stream/foo.json
{"items":[{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028927","type":""},{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028927","type":""},{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028926","type":""},{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028908","type":""},{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028887","type":""}],"itemsPerPage":1000,"page":0,"totalItems":5}</code></pre>
              <pre><code>$ curl -H "Content-Type: application/json" https://ballarathackerspace.org.au/meta/stream/foo.json?itemsPerPage=2
{"items":[{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028926","type":""},{"data":{"foo":"bar"},"meta":{"ip":"127.0.0.1"},"stream":"foo","timestamp":"1535028908","type":""}],"itemsPerPage":2,"page":1,"totalItems":5}
</code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row hidden">
      <div class="col-sm-12">
        <h4>IoT - Bill of Rights</h4>
        <p>We believe Internet of Things devices should all come with a well established expectation of what they will and will not do with consumer's data.</p>

        <ul>
          <li>Open is better than closed; this ensures portability between Internet of Things devices.</li>
          <li>Consumers, not companies, own the data collected by Internet of Things devices.</li>
          <li>Internet of Things devices that collect public data must share that data.</li>
          <li>Users have the right to keep their data private.</li>
          <li>Users can delete or back up data collected by Internet of Things devices.</li>
          <li>Let us take responsibility together for building systems that are easier to use for good and harder to use maliciously</li>
          <li>Devices that are always listening have a physical OFF and ON switch that clearly indicates to the user if and when they're listening. For example, a good practice could include a physical OFF and ON switch, which breaks one of the power lines coming into the recording component, with an indicator LED powered and controlled only by the power line, that clearly indicates to the user when the devices is and isn't listening. Services/devices and API usage of such services/devices, including, for example, Amazon Alexa, Apple Siri, Google Home, and others should clearly indicate when they are ON and listening and OFF and are not.</li>
        </ul>
      </div>
    </div>
  </div>
</section>
