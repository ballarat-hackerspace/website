#!/usr/bin/perl
#
# Licensed to the Apache Software Foundation (ASF) under one or or more
# contributor license agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership. The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

use FindBin;
use lib "$FindBin::Bin/lib";

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json encode_json);
use Mojo::UserAgent;
use Mojo::Util qw(b64_decode b64_encode dumper sha1_sum);
use NetAddr::IP;
use Text::MultiMarkdown qw(markdown);
use Time::Piece;


use Plugins::Jekyll;

plugin 'JSONConfig'      => {file => '/etc/bhackd.conf'};
plugin 'Plugins::Alarm'  => app->config->{alarm}  // {};
plugin 'Plugins::Device' => app->config->{device} // {};
plugin 'Plugins::Door'   => app->config->{door}   // {};
plugin 'Plugins::Jekyll' => app->config->{blog}   // {};
plugin 'Plugins::TidyHQ' => app->config->{tidyhq} // {};

app->secrets(app->config->{secrets});

helper 'is_local' => sub {
  my $c = shift;

  for my $hop (split /[, ]/, $c->req->headers->header('X-Forwarded-For') // '') {
    my $ip = NetAddr::IP->new($hop);
    return 1 if $ip && grep { $ip->within(NetAddr::IP->new($_)) } @{$c->app->config->{local}};
  }

  return undef;
};

helper 'is_not_dooropener' => sub {
  my $c = shift;
  my $bhack = $c->stash('bhack');

  return {'code' => 4001, 'error' => 'Inactive Membership'   } unless $c->tidyhq->has_active_membership({tidyhq => $bhack});
  return {'code' => 4002, 'error' => 'Insuffienct Membership'} unless $c->tidyhq->in_group('workshop members', {tidyhq => $bhack});
  return {'code' => 4003, 'error' => 'Unregistered Device'   } unless $c->device->is_whitelisted;

  return undef;
};

helper 'is_gatekeeper' => sub {
  my $c = shift;
  my $bhack = $c->stash('bhack');
  return undef unless $c->tidyhq->has_active_membership({tidyhq => $bhack});
  return undef unless $c->tidyhq->in_group('seeders', {tidyhq => $bhack});

  return 1;
};

hook 'before_dispatch' => sub {
  my $c = shift;

  # default cookie value
  my $bhack = {
    uuid => sha1_sum sprintf('%s-device-%s', rand, gmtime->epoch)
  };

  # load bhack cookie
  if (my $cookie = $c->signed_cookie('bhack')) {
    $cookie =~ y/-/=/;
    $bhack = decode_json b64_decode $cookie;
  }

  $c->stash(bhack => $bhack);
};

hook 'after_dispatch' => sub {
  my $c = shift;

  # save bhack cookie
  my $bhack = $c->stash('bhack') // {};
  $bhack->{timestamp} = gmtime->epoch;

  my $cookie = b64_encode encode_json($bhack), '';
  $cookie =~ y/=/-/;

  my $options = {
    expires  => 2000000000,
    httponly => 1,
    path     => '/',
  };

  $c->signed_cookie('bhack', $cookie, $options);
};

get '/'           => 'index';
get '/about'      => 'about';
get '/faq'        => 'faq';
get '/conduct'    => 'conduct';
get '/contact'    => 'contact';
get '/join'       => 'join';
get '/sponsors'   => 'sponsors';
get '/women'      => 'women';
get '/workshops'  => 'workshops';
get '/security'   => 'security';

get '/blog' => sub {
  my $c = shift;

  my $tags = $c->param('tags');
  my $summary = $c->blog_summary(tags => $tags);

  $c->stash(summary => $summary, tags => $tags);
  $c->render('blog');
};

get '/blog/:date/:slug' => sub {
  my $c = shift;

  my $entry = $c->blog_parse_entry($c->param('date'), $c->param('slug'));

  if ($entry->{status} == 200) {
    $c->stash($entry);
    return $c->render('blog-entry');
  }

  $c->redirect_to('blog');
} => 'blog-entry';

post '/login' => sub {
  my $c = shift;

  my $e   = $c->param('email');
  my $p   = $c->param('password');
  my $url = $c->param('rt') // 'index';

  $c->render_later;
  $c->tidyhq->login(email => $e, password => $p, sub {
    return $c->redirect_to($url);
  });
};

any '/logout' => sub {
  my $c = shift;

  $c->tidyhq->logout;

  # extract the redirect url and fall back to the index
  my $url = $c->param('rt') // 'index';

  return $c->redirect_to($url);
};

get '/modelrules' => sub {
  my $c = shift;

  #my $ua = Mojo::UserAgent->new;
  #my $tx = $ua->get('https://raw.githubusercontent.com/ballarat-hackerspace/association/master/rules-of-the-association.md');
  #$c->stash(rules_content => markdown($tx->res->body));

  $c->render('modelrules');
};

# members only
group {
  under '/members' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->tidyhq->is_authenticated;
    return $c->redirect_to('/');
  };

  get '/' => 'members';

  # device management
  get '/devices' => sub {
    my $c = shift;
    $c->stash(
      uuid    => $c->device->uuid,
      devices => $c->device->find
    );
    $c->render('members-devices');
  } => 'members-devices';

  post '/devices/add' => sub {
    my $c = shift;

    $c->device->add(
      uuid   => $c->param('uuid'),
      email  => $c->param('email'),
      device => $c->param('device')
    );
    $c->redirect_to('members-devices');
  } => 'members-devices-add';

  get '/devices/remove/:id' => sub {
    my $c = shift;

    $c->device->remove($c->param('id'));
    $c->redirect_to('members-devices');
  } => 'members-devices-remove';
};

# local network only
group {
  under '/local' => sub {
    my $c = shift;
    return 1 if $c->is_local;
    return $c->redirect_to('/');
  };

  get '/boiler' => 'boiler';
};

# door endpoints require additional device whitelisting checks
group {
  under '/door' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->is_local || $c->is_gatekeeper;
    return $c->redirect_to('/');
  };

  get '/' => 'door';
  get '/access' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render(json => {code => 2000, pong => $c->device->is_whitelisted});
  };

  get '/enter' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->enter(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };

  get '/open'  => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->open(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };

  get '/close' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->close(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
};

group {
  under '/alarm' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->is_local || $c->is_gatekeeper;
    return $c->redirect_to('/');
  };

  get '/disable' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->alarm->disable(
      duration => $c->param('for'),
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
  get '/enable' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->alarm->enable(
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
};

any '/*catch' => {catch => ''} => sub { shift->redirect_to('/'); };

app->start;
