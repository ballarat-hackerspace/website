#!/usr/bin/perl
#
# Licensed to the Apache Software Foundation (ASF) under one or or more
# contributor license agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership. The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

use FindBin;
use lib "$FindBin::Bin/lib";

use Mojolicious::Lite;
use Mojo::MQTT::Message;
use Mojo::UserAgent;
use Mojo::Util qw(b64_decode b64_encode dumper);

use NetAddr::IP;
use Text::MultiMarkdown qw(markdown);
use Time::Piece;

use constant {
  CONFIG_PATH => $ENV{BHACKD_CONFIG} // '/conf/bhackd.conf'
};

my $ua = Mojo::UserAgent->new;
my $clients = {};

app->log->info('Configuration: ' . CONFIG_PATH);

#
# PLUGINS
#

plugin 'JSONConfig'          => {file => CONFIG_PATH};
plugin 'Plugins::Alarm'      => app->config->{alarm}    // {};
plugin 'Plugins::Badge'      => app->config->{members}  // {};
plugin 'Plugins::Calendar'   => app->config->{calendar} // {};
plugin 'Plugins::Device'     => app->config->{members}  // {};
plugin 'Plugins::Door'       => app->config->{door}     // {};
plugin 'Plugins::Jekyll'     => app->config->{blog}     // {};
plugin 'Plugins::Member'     => app->config->{members}  // {};
plugin 'Plugins::Stream'     => app->config->{streams}  // {};
plugin 'Plugins::RemoteIP';
plugin 'Plugins::TidyHQ'     => app->config->{tidyhq}   // {};

#
# HELPERS
#

helper 'broadcast_stream' => sub {
  my $c = shift;
  my $args = @_%2 ? shift : {@_};

  for my $client (keys %{$clients}) {
    $clients->{$client}->send({json => $args});
  }
};

helper 'is_local' => sub {
  my $c = shift;

  for my $hop (split /[, ]/, $c->req->headers->header('X-Forwarded-For') // '') {
    my $ip = NetAddr::IP->new($hop);
    return 1 if $ip && grep { $ip->within(NetAddr::IP->new($_)) } @{$c->app->config->{local}};
  }

  return undef;
};

helper 'is_not_dooropener' => sub {
  my $c = shift;
  my $bhack = $c->stash('bhack');

  return {'code' => 4001, 'error' => 'Inactive Membership'   } unless $c->tidyhq->has_active_membership({tidyhq => $bhack});
  return {'code' => 4002, 'error' => 'Insuffienct Membership'} unless $c->tidyhq->in_group('full-time members', {tidyhq => $bhack});
  return {'code' => 4003, 'error' => 'Unregistered Device'   } unless $c->device->is_whitelisted;

  return undef;
};

helper 'is_gatekeeper' => sub {
  my $c = shift;
  my $bhack = $c->stash('bhack');
  return undef unless $c->tidyhq->has_active_membership({tidyhq => $bhack});
  return undef unless $c->tidyhq->in_group('seeders', {tidyhq => $bhack});

  return 1;
};

#
# HOOKS
#

hook 'before_routes' => sub {
  my $c = shift;

  $c->stash(member => $c->member->find(email => $c->session('user')));
};

#
# ROUTES
#

get '/about'            => 'about';
get '/code-of-conduct'  => 'conduct';
get '/contact'          => 'contact';
get '/faq'              => 'faq';
get '/join'             => 'join';
get '/security'         => 'security';
get '/sponsors'         => 'sponsors';
get '/women'            => 'women';
get '/workshops'        => 'workshops';

get '/' => sub {
  my $c = shift;

  my $events = $c->events->list(16);
  $c->stash(events => $events);

  $c->render('index');
};

get '/blog' => sub {
  my $c = shift;

  my $tags = $c->param('tags');
  my $summary = $c->blog_summary(tags => $tags);

  $c->stash(summary => $summary, tags => $tags);
  $c->render('blog');
};

get '/blog/:date/:slug' => sub {
  my $c = shift;

  my $entry = $c->blog_parse_entry($c->param('date'), $c->param('slug'));

  if ($entry->{status} == 200) {
    $c->stash($entry);
    return $c->render('blog-entry');
  }

  $c->redirect_to('blog');
} => 'blog-entry';

post '/login' => sub {
  my $c = shift;

  my $json = $c->req->json;

  my $e   = $json->{email}    // $c->param('email');
  my $p   = $json->{password} // $c->param('password');
  my $url = $json->{rt}       // $c->param('rt') // 'index';

  $c->render_later;

  $c->member->login($e, $p)->then(sub {
    return $c->render(json => {'message' => 'success'}, status => 200);
  }, sub {
    my $error = shift;
    return $c->render(json => {'message' => $error}, status => 400);
  });
};

any '/logout' => sub {
  my $c = shift;

  $c->member->logout;

  # extract the redirect url and fall back to the index
  my $url = $c->param('rt') // 'index';

  return $c->redirect_to($url);
};

get '/model-rules' => sub {
  my $c = shift;

  $c->render_later;
  $ua->get('https://raw.githubusercontent.com/ballarat-hackerspace/association/master/rules-of-the-association.md' => sub {
    my ($ua, $tx) = @_;

    $c->stash(rules_content => markdown($tx->res->body));
    $c->render('modelrules');
  });
};

get '/patreon' => sub {
  shift->redirect_to('https://www.patreon.com/ballarathackerspace');
};


# interactive 'meta' portal
get '/meta' => sub {
  my $c = shift;

  my $streams = $c->stream->streams(itemsPerPage => 1);
  my $meta = $c->stream->find(itemsPerPage => 10);

  $c->stash(streams => $streams, meta => $meta);

  $c->render('meta');
};

get '/meta/badges' => sub {
  my $c = shift;

  $c->stash(badges => $c->badges->find);

  $c->render('badges');
};

get '/meta/resources' => 'meta-resources';

get '/meta/space' => sub {
  my $c = shift;

  my $base_url = 'https://ballarathackerspace.org.au';

  my $space = {
    api => 0.13,
    space => 'Ballarat Hackerspace',
    logo => "$base_url/images/bhack-logo-title-black.svg",
    url => "$base_url",
    location => {
      address => 'Top Floor, Building K (Ballarat Tech School), Federation University SMB Campus, Ballarat',
      lat => -37.565247,
      lon => 143.857645
    },
    contact => {
      email => 'committee@ballarathackerspace.org.au',
      twitter => 'bhackerspace'
    },
    projects => [
      'https://github.com/ballarat-hackerspace',
      'https://gitlab.com/ballarat-hackerspace',
    ]
  };

  my $format = $c->stash('format') // 'html';

  if ($format eq 'html') {
    my $space_pretty = dumper $space;
    $space_pretty =~ s/ =>/:/g;

    $c->stash(space => $space, space_pretty => $space_pretty);
  }

  $c->respond_to(
    json => {json => $space},
    html => {template => 'meta-space'},
  );
} => 'spaceapi';

get '/meta/streams' => sub {
  my $c = shift;

  my $streams = $c->stream->find(fetch => 15);
  my $now = gmtime->epoch;

  my $format = $c->stash('format') // 'html';

  if ($format eq 'html') {
    $c->stash(streams => $streams);
  }

  $c->respond_to(
    json => {json => {streams => $streams, ts => $now}},
    html => {template => 'meta-streams'},
  );
};

get '/meta/streams/:stream' => sub {
  my $c = shift;

  my $stream_name = $c->param('stream');
  my $fetch = $c->param('fetch');
  my $relative;

  if ($c->param('relative_timestamp') || $c->param('relative_id')) {
    $relative = [$c->param('relative_timestamp') // 0, $c->param('relative_id') // 0];
  }

  my $stream = $c->stream->find(
    stream => $stream_name, fetch => $fetch, relative => $relative
  );

  my $format = $c->stash('format') // 'html';

  if ($format eq 'csv') {
    $stream = $c->stream->to_csv($stream);
  } elsif ($format eq 'html') {
    $c->stash(stream_name => $stream_name, stream => $stream);
  }

  $c->respond_to(
    csv  => {text => $stream},
    json => {json => $stream},
    html => {template => 'meta-stream'},
  );
} => 'meta-stream';


post '/meta/streams' => sub {
  my $c = shift;

  my $json = $c->req->json;

  my $stream   = $json->{stream}   // $c->param('stream') // '';
  my $origin   = $json->{origin}   // $c->param('origin');
  my $type     = $json->{type}     // $c->param('type');
  my $private  = $json->{private}  // $c->param('private');
  my $lifetime = $json->{lifetime} // $c->param('lifetime');
  my $data     = $json->{data}     // $c->param('data');

  my $now = gmtime->epoch;

  # validate stream name
  unless ($stream =~ m/[0-9a-zA-Z]{1,32}/) {
    return $c->render(
      json => {error => 'Stream name is missing/invalid.', ts => $now},
      status => 400
    );
  }

  if (defined($data)) {
    my $meta = {
      ip => $c->remote_ip->addr,
    };

    unless (length $data) {
      return $c->render(
        json => {
          error => 'No data specified.',
          ts => $now
        },
        status => 400
      );
    }

    $c->stream->publish(
      stream   => $stream,
      origin   => $origin,
      type     => $type,
      private  => $private,
      lifetime => $lifetime,
      data     => $data,
      meta     => $meta,
      created  => $now,
    );

    $c->broadcast_stream(stream => $stream, data => $data, timestamp => $now);

    return $c->render(
      json => {status => 'ok', ts => gmtime->epoch},
      status => 200
    );
  }

  return $c->render(
    json => {
      error => 'Some required parameters were missing.',
      ts => $now
    },
    status => 400
  );
};

group {
  my $IFTTT_SERVICE_KEY = app->config->{ifttt}{service_key};

  under '/meta/ifttt/v1' => sub {
    return 1;
  };

  get '/status' => sub {
    my $c = shift;

    if (
      ($c->req->headers->header('ifttt-service-key') ne $IFTTT_SERVICE_KEY) ||
      ($c->req->headers->header('ifttt-channel-key') ne $IFTTT_SERVICE_KEY)
    ) {
      return $c->render(json => {}, status => 401);
    }

    $c->render(json => {}, status => 200);
  };

  post '/test/setup' => sub {
    my $c = shift;

    if (
      ($c->req->headers->header('ifttt-service-key') ne $IFTTT_SERVICE_KEY) ||
      ($c->req->headers->header('ifttt-channel-key') ne $IFTTT_SERVICE_KEY)
    ) {
      return $c->render(json => {}, status => 401);
    }

    my $setup = {
      data => {
        samples => {
          triggers => {
            last_stream_value_comparison => {
              comparator => 'equals',
              value      => '41'
            }
          }
        }
      }
    };

    $c->render(json => $setup, status => 200);
  };

  post '/triggers/last_stream_value_comparison' => sub {
    my $c = shift;

    if (
      ($c->req->headers->header('ifttt-service-key') ne $IFTTT_SERVICE_KEY) ||
      ($c->req->headers->header('ifttt-channel-key') ne $IFTTT_SERVICE_KEY)
    ) {
      return $c->render(json => {errors => [{"message" => "invalid service/channel key"}]}, status => 401);
    }


    my $json = $c->req->json;

    warn dumper $json;

    unless ($json->{triggerFields} && $json->{triggerFields}{comparator}) {
      return $c->render(json => {errors => [{"message" => "triggerFields missing or incomplete."}]}, status => 400);
    }

    my $streams = $c->stream->last_values(fetch => $json->{limit});

    my $data = {
      data => []
    };

    for my $stream (@{$streams->{items}}) {
      push @{$data->{data}}, {
        stream => $stream->{stream},
        value => $stream->{data},
        meta => {
          id => $stream->{id},
          timestamp => $stream->{timestamp}
        }
      };
    }

    warn dumper $streams;

    $c->render(json => $data, status => 200);
  };
};

websocket '/meta/streams-ws' => sub {
  my $c = shift;

  app->log->debug(sprintf 'Client connected: %s', $c->tx);
  $c->inactivity_timeout(3600);

  my $id = sprintf "%s", $c->tx;
  $clients->{$id} = $c->tx;

  $c->on(finish => sub {
    app->log->debug('Client disconnected');
    delete $clients->{$id};
  });
};

# members only
group {
  under '/members' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->tidyhq->is_authenticated;

    $c->redirect_to('/');

    return undef;
  };

  get '/' => 'members';

  post '/profile' => sub {
    my $c = shift;

    if (($c->stash('member')->{email} eq $c->param('email')) || $c->member->current->has_role('admin')) {
      my $member = $c->members->find(email => $c->param('email'));

      $member->{name} = $c->param('name');
      $member->{avatar_url} = $c->param('avatar_url');

      $c->member->update($member);
    }

    $c->redirect_to('members-profile-me');
  } => 'members-profile-me-update';

  get '/profile/me' => sub {
    my $c = shift;

    $c->stash(devices => $c->device->find);

    $c->render('profile');
  } => 'members-profile-me';

  get '/profile/sign' => sub {
    my $c = shift;

    $c->member->current->waiver_sign;

    $c->redirect_to('profile');
  } => 'waiver-sign';

  get '/profile/#email' => sub {
    my $c = shift;

    # only admins can view all profiles
    return $c->redirect_to('/') unless $c->member->current->has_role('admin');

    my $member = $c->member->find(email => $c->param('email'));
    $c->stash(member => $member);
    $c->stash(devices => $c->device->find);

    $c->render('profile');
  } => 'members-profile-member';

  # device management
  get '/devices' => sub {
    my $c = shift;

    $c->stash(devices => $c->device->find);
    $c->render('members-devices');
  } => 'members-devices';

  post '/devices/add' => sub {
    my $c = shift;

    $c->device->add(
      uuid   => $c->param('uuid'),
      email  => $c->param('email'),
      device => $c->param('device')
    );
    $c->redirect_to('members-devices');
  } => 'members-devices-add';

  get '/devices/remove/:id' => sub {
    my $c = shift;

    $c->device->remove($c->param('id'));
    $c->redirect_to('members-devices');
  } => 'members-devices-remove';

  get '/workshops' => 'members-workshops';
};

group {
  under '/admin' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->member->current->has_role('admin');

    $c->redirect_to('/');

    return undef;
  };

  get '/' => 'admin';

  get '/badges' => sub {
    my $c = shift;

    $c->stash(badges => $c->badges->find);
    $c->render('admin-badges');
  } => 'admin-badges';

  post '/badges/add' => sub {
    my $c = shift;

    $c->badges->add(
      title     => $c->param('title'),
      image_url => $c->param('image_url'),
      criteria  => $c->param('criteria'),
      lifetime  => $c->param('lifetime')
    );

    $c->redirect_to('admin-badges');
  } => 'admin-badges-add';

  get '/streams' => sub {
    my $c = shift;

    $c->render('admin-streams');
  } => 'admin-streams';

  post '/streams/delete' => sub {
    my $c = shift;

    $c->stream->delete;

    $c->redirect_to('admin-streams');
  } => 'admin-streams-delete';

  get '/members' => sub {
    my $c = shift;

    $c->stash(members => $c->members->list);
    $c->render('admin-users');
  } => 'admin-users';
};

# local network only
group {
  under '/local' => sub {
    my $c = shift;
    return 1 if $c->is_local;
    return $c->redirect_to('/');
  };

  get '/boiler' => 'boiler';
};

# door endpoints require additional device whitelisting checks
group {
  under '/door' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->is_local || $c->is_gatekeeper;

    $c->redirect_to('/');

    return undef;
  };

  get '/' => 'door';
  get '/access' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render(json => {code => 2000, pong => $c->device->is_whitelisted});
  };

  get '/enter' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->enter(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };

  get '/open'  => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->open(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };

  get '/close' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->door->close(
      device => $c->device->is_whitelisted,
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
};

group {
  under '/alarm' => sub {
    my $c = shift;

    # stash for later
    $c->stash('uuid' => $c->device->uuid);

    return 1 if $c->is_local || $c->is_gatekeeper;
    return $c->redirect_to('/');
  };

  get '/disable' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->alarm->disable(
      duration => $c->param('for'),
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
  get '/enable' => sub {
    my $c = shift;

    if (my $status = $c->is_not_dooropener) {
      return $c->render(status => 403, json => $status);
    }

    $c->render_later;
    $c->alarm->enable(
      sub { shift; $c->render(status => shift, json => shift); }
    );
  };
};

any '/*catch' => {catch => ''} => sub { shift->redirect_to('/'); };

# establish in case we can't connect
Mojo::IOLoop->recurring(5 => sub {
  app->stream->mqtt->start(on_data => sub {
    app->broadcast_stream(@_);
  });
});

app->secrets(app->config->{secrets});
app->start;
